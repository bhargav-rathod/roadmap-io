generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  user_role     String    @default("USER")
  credits       Int       @default(10)
  accounts      Account[]
  sessions      Session[]
  roadmaps      Roadmap[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id   String @id @default(cuid())
  name String @unique
  type String // IT or Non-IT
}

model Role {
  id   String @id @default(cuid())
  name String @unique
  type String // IT or Non-IT
}

model ProgrammingLanguage {
  id   String @id @default(cuid())
  name String @unique
  type String // IT or Non-IT
}

model Country {
  id       String    @id @default(cuid())
  name     String    @unique
  roadmaps Roadmap[]
}

model Roadmap {
  id                      String           @id @default(cuid())
  title                   String
  roleType                String // IT or Non-IT
  company                 String
  country                 String?
  role                    String
  isFresher               Boolean?
  yearsOfExperience       String?
  monthsOfExperience      String?
  programmingLanguage     String?
  targetDuration          String           @default("Any")
  includeSimilarCompanies Boolean          @default(false)
  includeCompensationData Boolean          @default(false)
  includeOtherDetails     Boolean          @default(false)
  otherDetails            String?
  status                  String           @default("pending")
  structure               Json? // Stores the initial outline
  contentSections         Json? // Stores generated sections
  userId                  String
  expiresAt               DateTime         @default(now())
  user                    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  completedAt             DateTime?
  countryRef              Country?         @relation(fields: [country], references: [name])
  RoadmapSection          RoadmapSection[]
}

model RoadmapSection {
  id        String   @id @default(cuid())
  roadmapId String
  sectionId String // e.g., "interview-questions", "dsa-questions"
  content   String?
  status    String   @default("pending") // pending, generating, completed
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now()) // Optional: set expiration for cached content
}
