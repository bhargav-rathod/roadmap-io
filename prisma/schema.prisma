generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roadmaps      Roadmap[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id      String    @id @default(cuid())
  name    String    @unique
  roadmaps Roadmap[]
}

model Role {
  id      String    @id @default(cuid())
  name    String    @unique
  roadmaps Roadmap[]
}

model Roadmap {
  id                      String    @id @default(cuid())
  title                   String
  roleType                String
  yearsOfExperience       String
  company                 String
  role                    String
  duration                String?
  includeSimilarCompanies Boolean   @default(false)
  includeCompensationData Boolean   @default(false)
  status                  String    @default("pending")
  content                 String?
  userId                  String
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyRef              Company?  @relation(fields: [company], references: [name])
  roleRef                 Role?     @relation(fields: [role], references: [name])
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  completedAt             DateTime?
}